---
## Author
author:
  name: Каймакджыоглу Мерич Дорук
  email: 1032245391@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Отчёт по лабораторной работе №3"
subtitle: "Шифры перестановки и полиалфавитные шифры"
license: "CC BY"
---

# Цель работы

Целью данной лабораторной работы является изучение и практическая реализация алгоритма шифрования гаммированием с использованием конечной гаммы (ключа-пароля). Необходимо было освоить принципы работы данного шифра, включая применение модульной арифметики к символам текста, и разработать программное обеспечение на языке Python для выполнения операций шифрования и дешифрования сообщений.

# Задание

- Реализовать алгоритм шифрования гаммированием: Программа должна позволять шифровать и дешифровать текст с использованием ключа-пароля (конечной гаммы).
- Поддержка русского алфавита: Реализация должна корректно работать с русским алфавитом, учитывая его размер при выполнении операций по модулю.
- Создание интерфейса командной строки: Программа должна предоставлять пользователю простой интерфейс для ввода текста, ключа и выбора действия (шифрование или дешифрование).

# Теоретическое введение

Шифрование гаммированием — это метод симметричного шифрования, который заключается в наложении на открытый текст так называемой гаммы — псевдослучайной последовательности символов. В простейшем случае, как в данной лабораторной работе, гамма генерируется циклическим повторением ключевого слова.

Основная операция шифра — посимвольное сложение (или другая бинарная операция) символов исходного текста с символами гаммы по определённому модулю. Формула для шифрования выглядит следующим образом:

Ci = (Pi + Ki) mod N

Где:

    Ci — числовое значение i-го символа шифротекста.

    Pi — числовое значение i-го символа открытого текста.

    Ki — числовое значение i-го символа гаммы (ключа).

    N — мощность алфавита (например, 32 для русского алфавита без буквы "Ё").

Дешифрование выполняется обратной операцией — вычитанием по тому же модулю:

Pi = (Ci - Ki + N) mod N

Надёжность такого шифра напрямую зависит от длины и случайности гаммы. Использование короткого, повторяющегося ключа делает шифр уязвимым для криптоанализа, в частности для метода Касиски.

# Выполнение лабораторной работы

Для выполнения задания был разработан единый скрипт на языке Python, gamma_cipher.py, который содержит всю необходимую логику для шифрования и дешифрования текста. Такой подход был выбран из-за простоты алгоритма, не требующего разделения на множество модулей.

```

ALPHABET = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
N = len(ALPHABET)

char_to_num = {char: i for i, char in enumerate(ALPHABET)}
num_to_char = {i: char for i, char in enumerate(ALPHABET)}

def gamma_cipher_corrected(text, key, mode='encrypt'):
    text = text.upper().replace('Ё', 'Е')
    key = key.upper().replace('Ё', 'Е')
    
    clean_text = ''.join(filter(lambda char: char in ALPHABET, text))
    clean_key = ''.join(filter(lambda char: char in ALPHABET, key))

    if not clean_key:
        raise ValueError("Key is invalid.")

    result = ""
    key_index = 0

    for char in clean_text:
        text_idx = char_to_num[char]
        key_idx = char_to_num[clean_key[key_index % len(clean_key)]]
        
        if mode == 'encrypt':
            result_idx = (text_idx + key_idx + 1) % N 
        elif mode == 'decrypt':
            result_idx = (text_idx - key_idx - 1 + N) % N
        else:
            raise ValueError("Mode must be 'encrypt' or 'decrypt'.")
            
        result += num_to_char[result_idx]
        key_index += 1
        
    return result

if __name__ == "__main__":
    plaintext = "ПРИКАЗ"
    gamma_key = "ГАММА"
    
    encrypted_text = gamma_cipher_corrected(plaintext, gamma_key, mode='encrypt')
    print(f"Plaintext: \t{plaintext}")
    print(f"Key: \t\t{gamma_key}")
    print(f"Correct Encrypted: \t{encrypted_text}")
    print(f"Matches lab example: {encrypted_text == 'УСХЧБЛ'}\n")
    
    decrypted_text = gamma_cipher_corrected(encrypted_text, gamma_key, mode='decrypt')
    print(f"Ciphertext: \t{encrypted_text}")
    print(f"Decrypted: \t{decrypted_text}")
```

Зашифрованный текст: УСХЧБЛ
Расшифрованный текст: ПРИКАЗ

# Выводы

В ходе выполнения данной лабораторной работы был успешно реализован алгоритм шифрования гаммированием. Разработанная программа корректно выполняет шифрование и дешифрование текста на русском языке с использованием заданного ключа.

Одной из ключевых задач при реализации стала правильная адаптация математической модели шифра, описанной в методических указаниях с использованием 1-based нумерации (где 'А' = 1), к 0-based нумерации, стандартной для языка Python (где 'А' = 0). Эта проблема была успешно решена путем введения поправочного коэффициента в формулы шифрования и дешифрования.

Работа позволила получить практический опыт в реализации классических шифров и глубже понять принципы работы полиалфавитной замены и модульной арифметики в криптографии.

# Список литературы{.unnumbered}

::: {#Методические указания к лабораторной работе №3.}
